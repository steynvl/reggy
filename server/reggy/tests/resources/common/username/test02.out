Java
Pattern regex = Pattern.compile("(?=.*[a-z])(?=.*[!\"#$%&'()*+,-.:;<=>?@\\[\\]^_`{|}~])(?=.*\\d)(?=.*[A-Z]).{23,}");
(?=.*[a-z])(?=.*[!\"#$%&'()*+,-.:;<=>?@\\[\\]^_`{|}~])(?=.*\\d)(?=.*[A-Z]).{23,}
Perl
my $regex = /(?=.*[a-z])(?=.*[!"#$%&'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}/;
(?=.*[a-z])(?=.*[!"#$%&'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}
POSIX
(?=.*[a-z])(?=.*[!"#$%&'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}
(?=.*[a-z])(?=.*[!"#$%&'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}
Python
regex = re.compile(r'(?=.*[a-z])(?=.*[!"#$%&\'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}')
(?=.*[a-z])(?=.*[!"#$%&\'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}
JavaScript
const regex = /(?=.*[a-z])(?=.*[!"#$%&'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}/;
(?=.*[a-z])(?=.*[!"#$%&'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}
PHP
$regex = '/(?=.*[a-z])(?=.*[!"#$%&'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}/';
(?=.*[a-z])(?=.*[!"#$%&'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}
Golang
regex, _ := regexp.Compile("(?=.*[a-z])(?=.*[!\"#$%&'()*+,-.:;<=>?@\\[\\]^_`{|}~])(?=.*\\d)(?=.*[A-Z]).{23,}")
(?=.*[a-z])(?=.*[!\"#$%&'()*+,-.:;<=>?@\\[\\]^_`{|}~])(?=.*\\d)(?=.*[A-Z]).{23,}
Rust
let re = Regex::new(r"(?=.*[a-z])(?=.*[!"#$%&\'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}").unwrap();
(?=.*[a-z])(?=.*[!"#$%&\'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}
C#
var re = new Regex(@"(?=.*[a-z])(?=.*[!"#$%&\'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}");
(?=.*[a-z])(?=.*[!"#$%&\'()*+,-.:;<=>?@\[\]^_`{|}~])(?=.*\d)(?=.*[A-Z]).{23,}
Scala
val re = "(?=.*[a-z])(?=.*[!\"#$%&'()*+,-.:;<=>?@\\[\\]^_`{|}~])(?=.*\\d)(?=.*[A-Z]).{23,}".r
(?=.*[a-z])(?=.*[!\"#$%&'()*+,-.:;<=>?@\\[\\]^_`{|}~])(?=.*\\d)(?=.*[A-Z]).{23,}
Kotlin
val regex = Regex("(?=.*[a-z])(?=.*[!\"#$%&'()*+,-.:;<=>?@\\[\\]^_`{|}~])(?=.*\\d)(?=.*[A-Z]).{23,}")
(?=.*[a-z])(?=.*[!\"#$%&'()*+,-.:;<=>?@\\[\\]^_`{|}~])(?=.*\\d)(?=.*[A-Z]).{23,}